{"version":3,"sources":["sortingAlgorithms/mergeSortAlgorithm.js","sortingAlgorithms/quickSortAlgorithm.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSortAlgorithm.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quick_Sort","left","right","index","pivot","swap","partition","leftIndex","rightIndex","temp","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","newColor","barOne","barTwo","heightOne","heightTwo","swapp","n","bubble_Sort","getBubbleSortAnimations","first","second","third","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAAO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECLF,SAASgB,EAAuBjB,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,GAuClC,SAASkB,EAAWlB,EAAOmB,EAAMC,EAAOnB,GACpC,IAAIoB,EACArB,EAAME,OAAS,IACfmB,EA5BR,SAAmBrB,EAAOmB,EAAMC,EAAOnB,GACnC,IAAIqB,EAAQtB,EAAMU,KAAKC,OAAOS,EAAQD,GAAQ,IAC1CN,EAAIM,EACJL,EAAIM,EACRnB,EAAWc,KAAK,CAACL,KAAKC,OAAOS,EAAQD,GAAQ,GAAIG,EAAO,IACxD,KAAOT,GAAKC,GAAG,CACX,KAAOd,EAAMa,GAAKS,GACdrB,EAAWc,KAAK,CAACF,EAAGb,EAAMa,GAAI,IAC9BA,IAEJ,KAAOb,EAAMc,GAAKQ,GACdrB,EAAWc,KAAK,CAACD,EAAGd,EAAMc,GAAI,KAC9BA,IAEAD,GAAKC,IACLb,EAAWc,KAAK,CAACF,EAAGC,EAAG,IACvBS,EAAKvB,EAAOa,EAAGC,EAAGb,GAClBY,IACAC,KAIR,OADAb,EAAWc,KAAK,CAACF,EAAGH,KAAKC,OAAOS,EAAQD,GAAQ,GAAI,IAC7CN,EAMKW,CAAUxB,EAAOmB,EAAMC,EAAOnB,GAClCkB,EAAOE,EAAQ,GACfH,EAAWlB,EAAOmB,EAAME,EAAQ,EAAGpB,GAEnCoB,EAAQD,GACRF,EAAWlB,EAAOqB,EAAOD,EAAOnB,IAGxC,OAAOD,GAjDWkB,CAAWlB,EAAO,EAAGA,EAAME,OAAS,EAAGD,GACzD,OAAOA,EAGX,SAASsB,EAAKvB,EAAOyB,EAAWC,EAAYzB,GACxC,IAAI0B,EAAO3B,EAAMyB,GACjBzB,EAAMyB,GAAazB,EAAM0B,GACzB1B,EAAM0B,GAAcC,EAEpB1B,EAAWc,KAAK,CAACU,EAAWC,EAAY,MACxCzB,EAAWc,KAAK,CAACf,EAAMyB,GAAYzB,EAAM0B,GAAa,M,UCcrCE,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX9B,MAAO,IAHQ,E,gEAQjB+B,KAAKC,e,mCAKL,IADA,IA6L2BC,EAAKC,EA7L1BlC,EAAQ,GACLa,EAAI,EAAGA,EA/BS,GA+BiBA,IACxCb,EAAMe,MA2LmBkB,EA3LQ,EA2LHC,EA3LM,IA6LjCxB,KAAKC,MAAMD,KAAKyB,UAAYD,EAAMD,EAAM,GAAKA,KA3LlDF,KAAKK,SAAS,CAAEpC,Y,kCAKhB,IADA,IAAMC,EAAaF,EAAuBgC,KAAKD,MAAM9B,OAD3C,WAEDa,GACP,IAAMwB,EAAYC,SAASC,uBAAuB,aAElD,GADsB1B,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACV2B,EADU,KACCC,EADD,KAEXC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQhC,EAAI,IAAM,EAxCR,QAHF,YA4CdiC,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IApDb,EAqDhBhC,QAEHiC,YAAW,WAAO,IAAD,cACgB7C,EAAWY,GAD3B,GACR2B,EADQ,KACGQ,EADH,KAEKX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QA1DiB,EA2DhBnC,IAjBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAwBT,IADA,IAAMZ,EAAagB,EAAuBc,KAAKD,MAAM9B,OAD3C,cAGR,IAAMqC,EAAYC,SAASC,uBAAuB,aAH1C,cAI6BtC,EAAWY,GAJxC,GAIDQ,EAJC,KAIM2B,EAJN,KAIiBE,EAJjB,KAKR,GAAiB,IAAbA,EACFJ,YAAW,WACMT,EAAUhB,GAAOsB,MACzBI,gBAtDG,WAlBO,EAyEhBlC,QAEA,GAAiB,IAAbqC,EACPJ,YAAW,WACMT,EAAUhB,GAAOsB,MACzBI,gBArEO,UATG,EA+EhBlC,GACHiC,YAAW,WACMT,EAAUhB,GAAOsB,MACzBI,gBA5EK,cANK,GAmFflC,EAAI,SAEL,GAAiB,KAAbqC,EACPJ,YAAW,WACMT,EAAUhB,GAAOsB,MACzBI,gBA/EO,UATG,EAyFhBlC,GACHiC,YAAW,WACMT,EAAUhB,GAAOsB,MACzBI,gBAtFK,cANK,GA6FflC,EAAI,SAEL,GAAiB,IAAbqC,EACPJ,YAAW,WACT,IAAMK,EAASd,EAAUhB,GAAOsB,MAC1BS,EAASf,EAAUW,GAAWL,MACpCQ,EAAOJ,gBAvFE,MAwFTK,EAAOL,gBAxFE,QAZQ,EAqGhBlC,QAEA,GAAiB,MAAbqC,EAAkB,CACzB,IAAMC,EAASd,EAAUhB,GAAOsB,MAC1BS,EAASf,EAAUW,GAAWL,MACpC9B,IAHyB,kBAIgBZ,EAAWY,GAJ3B,GAIlBwC,EAJkB,KAIPC,EAJO,UAKzBR,YAAW,WACTK,EAAOF,OAAP,UAAmBI,EAAnB,MACAD,EAAOH,OAAP,UAAmBK,EAAnB,MACAH,EAAOJ,gBAtGO,QAuGdK,EAAOL,gBAvGO,UATG,GAiHflC,EAAI,IACRiC,YAAW,WACTK,EAAOJ,gBA7GK,YA8GZK,EAAOL,gBA9GK,cANK,EAqHflC,QAED,GAAiB,IAAbqC,EAAgB,CACvB,IAAMC,EAASd,EAAUhB,GAAOsB,MAC1BS,EAASf,EAAUW,GAAWL,MACpCG,YAAW,WACTK,EAAOJ,gBA5GG,SA6GVK,EAAOL,gBAtHK,cANK,GA8HflC,EAAI,IA9DF,KAEDA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,GA+DTiC,YAAW,WACT,IAAK,IAAIhC,EAAI,EAAGA,EA/HO,GA+HmBA,IAAK,CAC3BwB,SAASC,uBAAuB,aACzBzB,GAAG6B,MACrBI,gBAtHK,YAfO,EAuInB9C,EAAWC,U,mCAKf,IADA,IAAMD,EClJH,SAAiCD,GACpC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAKlC,SAAqBA,EAAOC,GACxB,IAAIsD,EACAC,EAAIxD,EAAME,OAAS,EACvB,EAAG,CACCqD,GAAQ,EACR,IAAK,IAAI1C,EAAI,EAAGA,EAAI2C,EAAG3C,IAGnB,GADAZ,EAAWc,KAAK,CAACF,EAAGA,EAAI,EAAG,IACvBb,EAAMa,GAAKb,EAAMa,EAAI,GAAI,CAEzBZ,EAAWc,KAAK,CAACF,EAAGA,EAAI,EAAG,IAC3B,IAAIc,EAAO3B,EAAMa,GACjBb,EAAMa,GAAKb,EAAMa,EAAI,GACrBb,EAAMa,EAAI,GAAKc,EACf4B,GAAQ,EACRtD,EAAWc,KAAK,CAACf,EAAMa,GAAIb,EAAMa,EAAI,GAAI,IAGjDZ,EAAWc,KAAK,CAACyC,GAAI,EAAG,IACxBA,UACKD,GACTtD,EAAWc,KAAK,EAAE,EAAGf,EAAME,OAAS,GAAI,IAzBxCuD,CAAYzD,EAAOC,GACZA,GD8IYyD,CAAwB3B,KAAKD,MAAM9B,OAD3C,cAGT,IAAMqC,EAAYC,SAASC,uBAAuB,aAHzC,cAIsBtC,EAAWY,GAJjC,GAIF8C,EAJE,KAIKC,EAJL,KAIaC,EAJb,KAaT,IARc,IAAXF,IAA2B,IAAXE,GACjBf,YAAW,WACT,IAAK,IAAIhC,EAAI,EAAGA,EAAI8C,EAAQ9C,IAAI,CACfuB,EAAUvB,GAAG6B,MACrBI,gBApIC,YAfO,EAqJhBlC,IAEU,IAAZ+C,EACDd,YAAW,WACMT,EAAUsB,GAAOhB,MACzBI,gBA3IG,WAfO,EA2JhBlC,QAGH,GAAc,IAAVgD,EAAa,CACf,IAAMV,EAASd,EAAUsB,GAAOhB,MAC1BS,EAASf,EAAUuB,GAAQjB,MACjCG,YAAW,WACTK,EAAOJ,gBAzJK,QA0JZK,EAAOL,gBA1JK,UATG,EAoKdlC,GACHiC,YAAW,WACTK,EAAOJ,gBAhKG,cANK,GAuKblC,EAAI,SAEL,GAAa,IAAVgD,EAAa,CACnB,IAAMV,EAASd,EAAUsB,GAAOhB,MAC1BS,EAASf,EAAUuB,GAAQjB,MACjCG,YAAW,WACTK,EAAOJ,gBAjKA,MAkKPK,EAAOL,gBAlKA,QAZQ,EA+KdlC,GACHA,IAPmB,kBAQsBZ,EAAWY,GARjC,GAQZwC,EARY,KAQDC,EARC,UASnBR,YAAW,WACTK,EAAOF,OAAP,UAAmBI,EAAnB,MACAD,EAAOH,OAAP,UAAmBK,EAAnB,MACAH,EAAOJ,gBA5KK,QA6KZK,EAAOL,gBA7KK,UATG,EAuLdlC,GACHiC,YAAW,WACTK,EAAOJ,gBAnLG,cANK,GA2LblC,EAAI,IAjDH,KAEFA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,mEAyDD,IAAD,OACAb,EAAS+B,KAAKD,MAAd9B,MAEP,OACE,yBAAK8D,UAAU,mBACZ9D,EAAM+D,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEH,UAAU,YACVI,IAAKD,EACLtB,MAAO,CACLI,gBAzMQ,YA0MRE,OAAO,GAAD,OAAKe,EAAL,YAGZ,4BAAQG,QAAS,kBAAM,EAAKnC,eAA5B,sBACA,4BAAQmC,QAAS,kBAAM,EAAKC,cAA5B,cACA,4BAAQD,QAAS,kBAAM,EAAKE,cAA5B,cACA,4BAAQF,QAAS,kBAAM,EAAKG,aAA5B,aACA,4BAAQH,QAAS,kBAAM,EAAKI,eAA5B,oB,GAnMuCC,IAAMC,W,MEbtCC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCGca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAAS4C,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d667daf0.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    var sortedArray = quick_Sort(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction swap(array, leftIndex, rightIndex, animations) {\r\n    var temp = array[leftIndex];\r\n    array[leftIndex] = array[rightIndex];\r\n    array[rightIndex] = temp;\r\n\r\n    animations.push([leftIndex, rightIndex, 111]);\r\n    animations.push([array[leftIndex], array[rightIndex], 111]);\r\n}\r\n\r\nfunction partition(array, left, right, animations) {\r\n    var pivot = array[Math.floor((right + left) / 2)], //middle element\r\n        i = left, //left pointer\r\n        j = right; //right pointer\r\n    animations.push([Math.floor((right + left) / 2), pivot, 4]); // pivot val yellow\r\n    while (i <= j) {\r\n        while (array[i] < pivot) {\r\n            animations.push([i, array[i], 1]);\r\n            i++;\r\n        }\r\n        while (array[j] > pivot) {\r\n            animations.push([j, array[j], 11]);\r\n            j--;\r\n        }\r\n        if (i <= j) {\r\n            animations.push([i, j, 2]);\r\n            swap(array, i, j, animations); //swapping two elements\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    animations.push([i, Math.floor((right + left) / 2), 3]);\r\n    return i;\r\n}\r\n\r\nfunction quick_Sort(array, left, right, animations) {\r\n    var index;\r\n    if (array.length > 1) {\r\n        index = partition(array, left, right, animations); //index returned from partition\r\n        if (left < index - 1) { //more elements on the left side of the pivot\r\n            quick_Sort(array, left, index - 1, animations);\r\n        }\r\n        if (index < right) { //more elements on the right side of the pivot\r\n            quick_Sort(array, index, right, animations);\r\n        }\r\n    }\r\n    return array;\r\n}","import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSortAlgorithm.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSortAlgorithm.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSortAlgorithm.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 70;\n\n// 0 This is the main color of the array bars. \nconst PRIMARY_COLOR = 'turquoise';\n\n// 1 & 11 & 111 This is the color of array bars that are being compared throughout the animations. \nconst SECONDARY_COLOR = 'green';\n\n// 2 This is comparing color when wrong\nconst TEMP_COLOR = 'red';\n\n// 3 when sorted\nconst FINAL_COLOR = 'purple';\n\n// 4 pivot\nconst PIVOT_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [index, newHeight, newColor] = animations[i];\n      if (newColor === 4) {\n        setTimeout(() => {\n          const barOne = arrayBars[index].style;\n          barOne.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (newColor === 1) {\n        setTimeout(() => {\n          const barOne = arrayBars[index].style;\n          barOne.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          const barOne = arrayBars[index].style;\n          barOne.backgroundColor = PRIMARY_COLOR;\n        }, (i + 1) * ANIMATION_SPEED_MS);\n      }\n      else if (newColor === 11) {\n        setTimeout(() => {\n          const barOne = arrayBars[index].style;\n          barOne.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          const barOne = arrayBars[index].style;\n          barOne.backgroundColor = PRIMARY_COLOR;\n        }, (i + 1) * ANIMATION_SPEED_MS);\n      }\n      else if (newColor === 2) {\n        setTimeout(() => {\n          const barOne = arrayBars[index].style;\n          const barTwo = arrayBars[newHeight].style;\n          barOne.backgroundColor = TEMP_COLOR;\n          barTwo.backgroundColor = TEMP_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (newColor === 111) {\n        const barOne = arrayBars[index].style;\n        const barTwo = arrayBars[newHeight].style;\n        i++;\n        const [heightOne, heightTwo, barColor] = animations[i];\n        setTimeout(() => {\n          barOne.height = `${heightOne}px`;\n          barTwo.height = `${heightTwo}px`;\n          barOne.backgroundColor = SECONDARY_COLOR;\n          barTwo.backgroundColor = SECONDARY_COLOR;\n        }, (i - 1) * ANIMATION_SPEED_MS);\n        setTimeout(() => {\n          barOne.backgroundColor = PRIMARY_COLOR;\n          barTwo.backgroundColor = PRIMARY_COLOR;\n        }, (i) * ANIMATION_SPEED_MS);\n      }\n      else if (newColor === 3) {\n        const barOne = arrayBars[index].style;\n        const barTwo = arrayBars[newHeight].style;\n        setTimeout(() => {\n          barOne.backgroundColor = FINAL_COLOR;\n          barTwo.backgroundColor = PRIMARY_COLOR;\n\n        }, (i - 1) * ANIMATION_SPEED_MS);\n      }\n    }\n    setTimeout(() => {\n      for (let j = 0; j < NUMBER_OF_ARRAY_BARS; j++) {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const barOne = arrayBars[j].style;\n        barOne.backgroundColor = FINAL_COLOR;\n      }\n    }, (animations.length) * ANIMATION_SPEED_MS);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [first, second, third] = animations[i]; \n      if(first === -2 && third === -2){\n        setTimeout(() => {\n          for (let j = 0; j < second; j++){\n            const barOne = arrayBars[j].style;\n            barOne.backgroundColor = FINAL_COLOR;\n          }\n        }, i * ANIMATION_SPEED_MS); \n      }\n      if(second === -1){\n        setTimeout(() => {\n          const barOne = arrayBars[first].style;\n          barOne.backgroundColor = FINAL_COLOR;\n        }, i * ANIMATION_SPEED_MS); \n      }\n      else{\n        if (third === 1) {\n          const barOne = arrayBars[first].style;\n          const barTwo = arrayBars[second].style;\n          setTimeout(() => {\n            barOne.backgroundColor = SECONDARY_COLOR;\n            barTwo.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS); \n          setTimeout(() => {\n            barOne.backgroundColor = PRIMARY_COLOR;\n          }, (i + 1) * ANIMATION_SPEED_MS); \n        }\n        else if(third === 2) {\n          const barOne = arrayBars[first].style;\n          const barTwo = arrayBars[second].style;\n          setTimeout(() => {\n            barOne.backgroundColor = TEMP_COLOR;\n            barTwo.backgroundColor = TEMP_COLOR;\n          }, i * ANIMATION_SPEED_MS); \n          i++;\n          const [heightOne, heightTwo, barColor] = animations[i]; \n          setTimeout(() => {\n            barOne.height = `${heightOne}px`;\n            barTwo.height = `${heightTwo}px`;\n            barOne.backgroundColor = SECONDARY_COLOR;\n            barTwo.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS); \n          setTimeout(() => {\n            barOne.backgroundColor = PRIMARY_COLOR;\n//            barTwo.backgroundColor = SECONDARY_COLOR;\n          }, (i + 1) * ANIMATION_SPEED_MS); \n        } \n      }\n    }\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubble_Sort(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubble_Sort(array, animations) {\r\n    var swapp;\r\n    var n = array.length - 1;\r\n    do {\r\n        swapp = false;\r\n        for (var i = 0; i < n; i++) {\r\n            // turn green\r\n            animations.push([i, i + 1, 1]);\r\n            if (array[i] > array[i + 1]) {\r\n                // turn red if wrong\r\n                animations.push([i, i + 1, 2]);\r\n                var temp = array[i];\r\n                array[i] = array[i + 1];\r\n                array[i + 1] = temp;\r\n                swapp = true;\r\n                animations.push([array[i], array[i + 1], 1]);\r\n            }\r\n        }\r\n        animations.push([n, -1, 3]);\r\n        n--;\r\n    } while (swapp);\r\n    animations.push([-2, array.length - 1, -2]);\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}